*********************
Module Addition Guide
*********************

En este documento se explicará el proceso que se debe llevar a cabo para añadir un nuevo módulo al sistema.

Creación del módulo
====================
En primer lugar se deberá crear en la carpeta raíz del proyecto una nueva carpeta con el nombre del módulo y, dentro de esta, el fichero .py del módulo y un fichero __init__.py vacío.

Implementación del módulo
=========================
En el fichero {modulo}.py se creará una clase con el mismo nombre del fichero y de la carpeta contenedora y el constructor se incluirá el parámetro "key" de la siguiente manera:

.. code-block:: text

   def __init__(self, key):
   
   
Es irrelevante si el servicio que se está implementando hace uso de esta clave o no, pero el parámetro se ha de añadir.

Esta clase se compondrá de las funciones **getImage** y **getMetadata**. Opcionalmente se podrá incluir también **getPreview**. 

Las tres funciones recibirán un único parámetro que será un diccionario con los parámetros insertados por el usuario cuando realice una llamada al sistema. Es conveniente llamar a este parámetro *user_params* para mantener la consistencia entre módulos.

La función **getImage** devolverá dos valores. El primero será una imagen en *bytes* y el segundo será un string con los metadatos de dicha imagen en formato *GeoJSON*.
La función **getMetadata** una lista *strings*. Cada uno de estos serán los metadatos de las imágenes que coincidan con los parámetros que haya insertado el usuario. Aunque se encuentre únicamente una imagen que coincida con la búsqueda, se devolverán dichos metadatos dentro de una lista.
La función **getPreview** devolverá la imagen solicitada en bytes.

En caso de que se produzca algún error durante el código será responsabilidad del programador manejar correctamente dicha excepción y lanzar una de las excepciones que el sistema acepta. Estas se encuentran en el módulo **ApiExceptions.py**. Si no se encontrara algún dato que el usuario solicita como imágenes o metadatos se lanzaría una excepción del tipo ApiException con el mensaje de error correspondiente.
Es posible añadir nuevas excepciones al sistema para usarlas en el módulo que está siendo creado. Para ello se deben añadir al fichero ApiExceptions y heredar de la clase implementada en ese mismo módulo denominada ApiException.

Fichero de configuración
========================
En el fichero de configuración se ha de añadir en la clave *servicios* el nombre del módulo que se está implementando y su ruta separado por el carácter: /. También se añadirá su clave en el apartado *keys*. Esto se deberá realizar aunque no se haga uso de clave. En este caso incluir un string en blanco. También se añadirán los parámetros por defecto que se consideren oportunos para el propio módulo. Vemos el formato de este fichero a continuación:

.. code-block:: text

   {
  "server": "http://localhost:5000/",
  "servicios":{
	"bingmaps":"BingMaps/BingMaps",
	"googlemaps": "GoogleMaps/GoogleMaps",
	"planetlabs": "PlanetLabs/PlanetLabs"
  },
  "keys":{
	"bingmaps":"XXXXXXXXXXXXXXXXXXXXXXXXXX",
	"googlemaps": "XXXXXXXXXXXXXXXXXXXXXXXXXX",
	"planetlabs": "XXXXXXXXXXXXXXXXXXXXXXXXXX"
  },
  "defaultParameters":{
		"size": "640,640",
		"resolution": "35",
		"maxResults": "1",
		"format": "png",
		"beforeDate": "31-12-2040",
		"afterDate":"01-01-1970"
		}
   }


Documentación
==============
Se deberá documentar el módulo, la clase del módulo y todas las funciones que lo compongan, así como cualquier código añadido a cualquier otro módulo. Esta documentación seguirá el formato **Google Docstring** para mantener la consistencia en el sistema. También se deberá añadir a la guía de usuario encontrada en la documentación de Sphinx los parámetros que aceptaría dicho módulo, como está especificado para los demás.












